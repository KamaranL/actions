name: 'first-step'
description: ''
inputs:
  gitversion-mode:
    description: |
      GitVersion Mode
      Options: {'Continuous Deployment','Mainline Development'}
      Default: 'Continuous Deployment'
    default: 'Continuous Deployment'
    required: false

runs:
  using: composite
  steps:
    - run: sudo timedatectl set-timezone "America/New_York"
      shell: bash

    - uses: 1password/load-secrets-action@v1
      env:
        OP_SERVICE_ACCOUNT_TOKEN: ${{ inputs.op-token }}
        SSH_ID: 'op://Private/bot@kamaranl.vip/private key'
        SSH_ID_PUB: 'op://Private/bot@kamaranl.vip/public key'
        GH_TOKEN: op://Tokens/GitHub.kamaranl.CICD/credential

    - run: |
        echo "::group::Starting Git configuration"
        SSH_TMP="$RUNNER_TEMP/.ssh"
        [ ! -d "$SSH_TMP" ] && mkdir -p "$SSH_TMP"
        echo "::debug::Writing ssh keys..."
        echo "$SSH_ID" >"$SSH_TMP/id_ed25519"
        echo "$SSH_ID_PUB" >"$SSH_TMP/id_ed25519.pub"
        chmod 0600 "$SSH_TMP/id_ed25519"
        SSH_AS=$(<"$SSH_TMP/id_ed25519.pub")
        echo "${SSH_AS##* } ${SSH_AS% *}" >"$SSH_TMP/allowed_signers"
        echo "::debug::Setting Git global configuration"
        git config --global user.name "GitHub Actions"
        git config --global user.email "bot@kamaranl.vip"
        git config --global gpg.format "ssh"
        git config --global user.signingkey "$SSH_TMP/id_ed25519.pub"
        git config --global gpg.ssh.allowedsignersfile "$SSH_TMP/allowed_signers"
        git config --global commit.gpgsign true
        git config --global tag.gpgsign true
        git config --global push.followtags true
        echo "::debug::Git configuration complete"
        while IFS= read -ra line; do echo "::debug::>>$line"; done <<<"$(git config --list --global)"
        echo "::endgroup::"
      shell: bash

    - run: |
        echo "::group::Starting GitVersion configuration"
        echo "::debug::Validating 'INPUT_GITVERSION_MODE'"
        GV_CFG="$GITHUB_ACTION_PATH/files/gitversion/${INPUT_GITVERSION_MODE// /}.yml"
        [ ! -r "$GV_CFG" ] && {
            echo "::error::Not a valid GitVersion config file: ${GV_CFG##*\/}"
            exit 1
        }
        GV_TMP="$RUNNER_TEMP/gitversion"
        echo "::debug::Copying GitVersion config..."
        [ ! -d "$GV_TMP" ] && mkdir -p "$GV_TMP"
        cp "$GV_CFG" "$GV_TMP/GitVersion.yml"
        echo "GITVERSION_YML=$GV_TMP/GitVersion.yml" >>"$GITHUB_ENV"
        echo "::endgroup::"
      shell: bash
      env:
        INPUT_GITVERSION_MODE: ${{ inputs.gitversion-mode }}

    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ env.GH_TOKEN }}
