name: 'release'
description: ''
inputs:
  assets:
    description: ''
  op-service-account-token:
    description: ''

runs:
  using: composite
  steps:
    - if: github.event != 'pull_request'
      run: |
        echo "::notice::${{ github.workflow }} will only complete successfully on \"pull_request\""
      shell: bash

    - uses: KamaranL/actions/checks@v0
      with:
        git: |
          has-keypair
          is-configured
      id: checks

    - if: fromJson(steps.checks.outputs.git).has-keypair == false
      uses: 1password/load-secrets-action@v1
      with:
        export-env: false
      env:
        id: 'op://Integrations/bot@kamaranl.vip/private key'
        id_pub: 'op://Integrations/bot@kamaranl.vip/public key'
      id: op-ssh

    - if: |
        fromJson(steps.checks.outputs.git).has-keypair == false &&
            fromJson(steps.checks.outputs.git).is-configured == false
      run: |
        : # write ssh keypair
        echo "::debug::write(id, id_pub)"
        SSH_TEMP="${{ fromJson(steps.checks.outputs.path).ssh }}"
        SSH_ID="${{ steps.op-ssh.outputs.id }}"
        SSH_ID_PUB="${{ steps.op-ssh.outputs.id_pub }}"
        [ ! -d "$SSH_TEMP" ] && mkdir -p "$SSH_TEMP"
        echo "$SSH_ID" >"$SSH_TEMP/id_ed25519"
        echo "$SSH_ID_PUB" >"$SSH_TEMP/id_ed25519.pub"
        echo "${SSH_ID_PUB##* } ${SSH_ID_PUB% *}" >"$SSH_TEMP/allowed_signers"
        chmod 0600 "$SSH_TEMP/id_ed25519"
      shell: bash

    - run: |
        ls -la "$RUNNER_TEMP/.ssh"
        cat "$RUNNER_TEMP/.ssh/id_ed25519.pub"
        cat "$RUNNER_TEMP/.ssh/allowed_signers"
        exit 64
      shell: bash

    - if: fromJson(steps.checks.outputs.git).is-configured == false
      run: |
        : # configure git
        echo "::debug::configure(git)"
        SSH_TEMP="${{ fromJson(steps.checks.outputs.path).ssh }}"
        git config --global user.name "GitHub Actions"
        git config --global user.email "bot@kamaranl.vip"
        git config --global user.signingkey "$SSH_TEMP/id_ed25519.pub"
        git config --global gpg.ssh.allowedsignersfile "$SSH_TEMP/allowed_signers"
        git config --global gpg.format "ssh"
        git config --global commit.gpgsign true
        git config --global tag.gpgsign true
        git config --global push.followtags true
        git config --global push.default "upstream"
        while IFS= read -ra line; do
            echo "::debug::>> $line"
        done <<<"$(git config --list --global)"
      shell: bash

    - run: |
        : # amend commit
        echo "::debug::commit()"
        git commit -a --amend --no-edit --date=now && {
            CI_SHA="$(git rev-parse HEAD)"
            echo "sha=$CI_SHA" >>"$GITHUB_OUTPUT"
            echo "origin=$CI_SHA:$CI_SOURCE_BRANCH" >>"$GITHUB_OUTPUT"
            echo "tag=v$CI_VERSION" >>"$GITHUB_OUTPUT"
        }
      shell: bash
      id: commit

    - if: steps.commit.outputs == null
      run: |
        echo "::notice::git did not commit successfully, exiting now"
        exit 128
      shell: bash

    - if: steps.commit.outputs
      run: |
        : # create tag
        echo "::debug::tag($CI_TAG)"
        git tag -a "$CI_TAG" -m "$CI_TAG" "$CI_SHA"
      shell: bash
      env:
        CI_SHA: ${{ steps.commit.outputs.sha }}
        CI_TAG: ${{ steps.commit.outputs.tag }}

    - run: |
        : # push back to source
        echo "::debug::push($CI_ORIGIN)"
        git push origin "$CI_ORIGIN" --force-with-lease
      shell: bash
      env:
        CI_ORIGIN: ${{ steps.commit.outputs.origin }}

    # - if: ${{ !inputs.assets }}
    #   run: |
    #     :
    #     # create release
    #     gh release create "$CI_TAG" --latest --generate-notes --verify-tag
    #   shell: bash
    #   env:
    #     CI_TAG: ${{ steps.commit.outputs.tag }}

    # - if: ${{ inputs.assets }}
    #   run: |
    #     :
    #     # create release with assets
    #     gh release create "$CI_TAG" --latest --generate-notes --verify-tag "$INPUT_ASSETS"/*
    #   shell: bash
    #   env:
    #     CI_TAG: ${{ steps.commit.outputs.tag }}
    #     INPUT_ASSETS: ${{ inputs.assets }}
