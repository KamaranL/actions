name: checks
description: ''
inputs:
  all:
    description: |
        [true, false]

        Default: false
    default: 'false'
  github:
    description: |
      ["timezone-set",
      "has-token",
      "has-repository",
      "release",
      "ci-label"]
  git:
    description: |
      ["has-keypair",
      "is-configured"]

outputs:
  github:
    value: ${{ steps.json.outputs.github }}
    description: ''
  git:
    value: ${{ steps.json.outputs.git }}
    description: ''
  path:
    value: ${{ steps.json.outputs.path }}
    description: ''

runs:
  using: composite
  steps:
    - run: |
        : # open files
        FILES=(
            github
            git
            path
        )
        JSON_TEMP="$RUNNER_TEMP/.json"
        [ ! -d "$JSON_TEMP" ] && mkdir -p "$JSON_TEMP"
        for file in "${FILES[@]}"; do
            JSON="$JSON_TEMP/$file"
            echo "{" >"$JSON"
            echo "$file=$JSON" >>"$GITHUB_OUTPUT"
            echo "::debug::>open($file)"
        done
        echo "files=${FILES[@]}" >>"$GITHUB_OUTPUT"
        echo "json_temp=$JSON_TEMP" >>"$GITHUB_OUTPUT"
      shell: bash
      id: file

####################
# GitHub
####################

    # - if: ${{ contains(inputs.github, 'timezone-set') || fromJson(inputs.all) == true }}
    #   run: |
    #     { # github.timezone-set
    #         echo "->check(github.timezone-set)"
    #         [ "$(</etc/timezone)" != "America/New_York" ] && val="false"
    #         echo "$(<${{ steps.file.outputs.github }}) \"timezone-set\": ${val:-true}," >'${{ steps.file.outputs.github }}'
    #     }; :
    #   shell: bash

    # - if: ${{ contains(inputs.github, 'has-token') || fromJson(inputs.all) == true }}
    #   run: |
    #     { # github.has-token
    #         echo "->check(github.has-token)"
    #         [ -z "$GH_TOKEN" ] && val="false"
    #         echo "$(<${{ steps.file.outputs.github }}) \"has-token\": ${val:-true}," >'${{ steps.file.outputs.github }}'
    #     }; :
    #   shell: bash

    # - if: ${{ contains(inputs.github, 'has-repository') || fromJson(inputs.all) == true }}
    #   run: |
    #     { # github.has-repository
    #         echo "->check(github.has-repository)"
    #         ! git status >/dev/null 2>&1 && val="false"
    #         echo "$(<${{ steps.file.outputs.github }}) \"has-repository\": ${val:-true}," >'${{ steps.file.outputs.github }}'
    #     }; :
    #   shell: bash

    # - if: ${{ contains(inputs.github, 'release') || fromJson(inputs.all) == true }}
    #   run: |
    #     { # github.first-release
    #         echo "->check(github.first-release)"
    #         if ! git describe --tags --abbrev=0 >/dev/null 2>&1 && ! gh release view --repo "$GITHUB_REPOSITORY" >/dev/null 2>&1; then
    #             val="true"
    #         fi
    #         echo "$(<${{ steps.file.outputs.github }}) \"first-release\": ${val:-false}," >'${{ steps.file.outputs.github }}'
    #     }; :
    #   shell: bash

    - if: ${{ contains(inputs.github, 'release') || fromJson(inputs.all) == true }}
      run: |
        { # github.is-release, github.is-prerelease
            echo "->check(github.is-release, github.is-prerelease)"
            if [ "${GITHUB_BASE_REF:-github.base_ref}" == main ] &&
                [[ ${GITHUB_HEAD_REF:-github.head_ref} =~ ^dev(elop)?(ment)?$ ]]; then
                echo "$(<${{ steps.file.outputs.github }}) \"is-release\": true," >'${{ steps.file.outputs.github }}'
                echo "$(<${{ steps.file.outputs.github }}) \"is-prerelease\": false," >'${{ steps.file.outputs.github }}'
            else
                echo "$(<${{ steps.file.outputs.github }}) \"is-prerelease\": true," >'${{ steps.file.outputs.github }}'
                echo "$(<${{ steps.file.outputs.github }}) \"is-release\": false," >'${{ steps.file.outputs.github }}'
            fi
        }; :
      shell: bash

    - if: ${{ contains(inputs.github, 'ci-label') || fromJson(inputs.all) == true }}
      run: |
        { # github.ci-label
            echo "->check(github.ci-label)"
            for label in $(gh label list --json name --jq .[].name --repo "$GITHUB_REPOSITORY"); do
                [ "$label" == ci ] && {
                    val=true
                    break
                }
            done
            echo "$(<${{ steps.file.outputs.github }}) \"ci-label\": ${val:-false}," >'${{ steps.file.outputs.github }}'
            echo "$(<${{ steps.file.outputs.path }}) \"log\": \"$RUNNER_TEMP/.log\"," >'${{ steps.file.outputs.path }}'
        }; :
      shell: bash

####################
# Git
####################

    - if: ${{ contains(inputs.git, 'has-keypair') || fromJson(inputs.all) == true }}
      run: |
        { # git.has-keypair, path.ssh
            echo "->check(git.has-keypair)"
            SSH_TEMP="$RUNNER_TEMP/.ssh"
            ! [ -f "$SSH_TEMP/id_ed25519" -a -f "$SSH_TEMP/id_ed25519.pub" ] && val="false"
            echo "$(<${{ steps.file.outputs.git }}) \"has-keypair\": ${val:-true}," >'${{ steps.file.outputs.git }}'
            echo "$(<${{ steps.file.outputs.path }}) \"ssh\": \"$SSH_TEMP\"," >'${{ steps.file.outputs.path }}'
        }; :
      shell: bash

    - if: ${{ contains(inputs.git, 'is-configured') || fromJson(inputs.all) == true }}
      run: |
        { # git.is-configured
            echo "->check(git.is-configured)"
            [ "$(git config --global user.email)" != "bot@kamaranl.vip" ] && val=false
            echo "$(<${{ steps.file.outputs.git }}) \"is-configured\": ${val:-true}," >'${{ steps.file.outputs.git }}'
        }; :
      shell: bash

    - run: |
        : # close files, redirect files to output
        FILES=(${{ steps.file.outputs.files }})
        JSON_TEMP='${{ steps.file.outputs.json_temp }}'
        for file in "${FILES[@]}"; do
            JSON="$JSON_TEMP/$file"
            CONTENT="$(<$JSON)"
            echo "$file=${CONTENT%,*} }" >>"$GITHUB_OUTPUT"
            echo "->close($file)"
        done
        rm -rf "$JSON_TEMP"
      shell: bash
      id: json
